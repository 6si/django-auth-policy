IDEAS / TODOS
=============

* Optionally keep a history of passwords (hashed) to prevent password reuse

  password model field has been added.

* Expand docs

* Add example on how to implement Djangos password reset views

* Add example on how to send temporary passwords by email

* Add tests for Django admin code

* Add tests for UserChange tracking

* Add more signals as hooks for additional functionality

* Optionally prevent usage of passwords from a list of common passwords
  
  Supply a publicly available list with django_auth_policy?

  Filter this list based on the other policy rules.

* Optionally use different source of random data for temporary password
  generation

* Optionally check password complexity at login and enforce new password
  for weak passwords

* Optionally measure entropy of passwords
  Research: any good enough algorithms available?

* Move testsite into seperate folder als move all URLs to testsite

* Add password strength ideas from OWASP:
  https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Implement_Proper_Password_Strength_Controls

  - 3 out of 4 complexity rules
  - not more than 2 identical characters in a row (ie. 111 not allowed)

* Add authentication ideas from Mozilla:
  https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines#Authentication

* Add password hasher for bcrypt/scrypt/PDKDF2 which stores nonce/salt
  seperately (not in the database) but still accessible by all web processes

* Use sensitive_variables and sensitive_post_parameters to hide passwords from
  Django error reports
