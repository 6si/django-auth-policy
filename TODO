IDEAS / TODOS
=============

* Optionally keep a limited history of passwords (hashed) to prevent password
  reuse, password model field has been added.

* Expand docs

* Add example on how to implement Djangos password reset views

* Add example on how to send temporary passwords by email

* Add tests for Django admin code

* Add tests for UserChange tracking

* Add more signals as hooks for additional functionality

* Optionally prevent usage of passwords from a list of common passwords
  
  Supply a publicly available list with django_auth_policy?

  Filter this list based on the other policy rules.

* Optionally use different source of random data for temporary password
  generation

* Optionally check password complexity at login and enforce new password
  for weak passwords

* Optionally measure entropy of passwords
  Research: any good enough algorithms available?

* Add password strength ideas from OWASP:
  https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Implement_Proper_Password_Strength_Controls

  - 3 out of 4 complexity rules
  - not more than 2 identical characters in a row (ie. 111 not allowed)

* Add authentication ideas from Mozilla:
  https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines#Authentication

* Add password hasher for bcrypt/scrypt/PDKDF2 which stores nonce/salt
  seperately (not in the database) but still accessible by all web processes

* Use sensitive_variables and sensitive_post_parameters to hide passwords from
  Django error reports

* Optionally forbid/logout users when certain headers change (USER_AGENT,
  REMOTE_ADDR, X_FORWARDED_FOR) Also log this.

* Only login from whitelisted IP addresses/ranges.
  Or provide example which limits admin/superuser login
  to certain IP addresses by sending the REMOTE_ADDR to authentication backend.

* Only allow certain usernames at login (list of possible regex-es)
  Could be used to enforce usernames to end with company domainname.

* Add password strength checker which uses unicodedata.category
  http://www.unicode.org/reports/tr44/tr44-4.html#General_Category_Values

* Implement a LoginViewRequired middleware just like CsrfViewMiddleware with a
  login_required_exempt decorator
  Does this expose which URLs are available on a site (because it returns 404
  or login screens depending of existence of URL resource)
